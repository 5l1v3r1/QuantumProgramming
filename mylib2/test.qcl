include "mod";

set check 1;

int maximumValue(int a, int b) {
    if a < b {
        return b;
    } else {
        return a;
    }
}

procedure testModMult() {
    int i;
    int j;
    int modulus;
    int measured;
    qureg x[4];
    
    print "testing BitwiseModMultIP() for 4-qubits...";
    
    for i = 1 to 14 {
        for j = 1 to 14 {
            for modulus = (maximumValue(i,j) + 1) to 15 {
                if gcd(modulus, j) == 1 {
                    set(i, x);
                    BitwiseModMultIP(j, x, modulus);
                    measure x, measured;
                    reset;
                    if measured != (i * j) mod modulus {
                        print "failed for i=", i, " j=", j, " mod=", modulus;
                        exit "goodbye";
                    }
                }
            }
        }
    }
}

procedure testModExp() {
    int i;
    int j;
    int modulus;
    int measured;
    qureg x[4];
    qureg y[4];
    
    print "testing BitwiseModExp() for 4-qubits";
    
    for i = 1 to 14 {
        for j = 1 to 14 {
            for modulus = (maximumValue(i, j + 1)) to 15 {
                if gcd(modulus, j) == 1 {
                    set(i, x);
                    BitwiseModExp(j, x, y, modulus);
                    measure y, measured;
                    reset;
                    if measured != (j^i) mod modulus {
                        print "fail for i=", i, " j=", j, " measured=", measured;
                        exit "goodbye";
                    }
                }
            }
        }
    }
}

testModMult();
testModExp();
