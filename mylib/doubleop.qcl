set library 1;

// applies a controlled V gate to result with angle if
// all flags are <1|
operator StringV(real angle, qureg result, qureg flags) {
    int lastFlag;
    if #flags == 1 {
        V(angle, result & flags);
    } else {
        lastFlag = #flags - 1;
        V(angle / 2, result & flags[lastFlag]);
        
        // StringNot(flags[lastFlag], flags[0 \ (#flags - 1)]);
        H(flags[lastFlag]);
        StringV(pi, flags[lastFlag], flags[0 \ (#flags - 1)]);
        H(flags[lastFlag]);
        
        V(-angle / 2, result & flags[lastFlag]);
        
        // StringNot(flags[lastFlag], flags[0 \ (#flags - 1)]);
        H(flags[lastFlag]);
        StringV(pi, flags[lastFlag], flags[0 \ (#flags - 1)]);
        H(flags[lastFlag]);
        
        StringV(angle / 2, result, flags[0 \ (#flags - 1)]);
    }
}

// applies a not to result if all flags are <1|
operator StringNot(qureg result, qureg flags) {
    if #flags == 1 {
        CNot(result, flags);
    } else {
        H(result);
        StringV(pi, result, flags);
        H(result);
    }
}

// see StringV(); this is simply a legacy function
operator DoubleV(real angle, qureg result, qureg flags) {
    StringV(angle, result, flags);
}

// see StringNot(); this is simply a legacy function
operator DoubleNot(qureg result, qureg flags) {
    StringNot(result, flags);
}

operator StringSwap(qureg a, qureg b, qureg c) {
    int i;
    
    if #a != #b {
        exit "Arguments must be equal in length";
    }
    
    for i = 0 to #a - 1 {
        StringNot(a[i], b[i] & c);
        StringNot(b[i], a[i] & c);
        StringNot(a[i], b[i] & c);
    }
}
