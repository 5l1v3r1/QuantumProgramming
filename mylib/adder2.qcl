include "equality";

set library 1;

// this function looks at two inputs and an output and flips
// the `flip` argument if a carry must have been performed.
operator CFlipCF(qureg a, qureg b, qureg c, qureg flip, qureg control) {
    // if a+b = c would have resulted in carrying this
    // flips the cf
    if #a != 1 or #b != 1 or #c != 1 or #flip != 1 {
        exit "All input registers must be one qubit";
    }
    
    // if a == 0 then flip if b,c = 1,0
    // if a == 1 then flip if b,c != 0,1
    
    // flips CF if bc = <1^a| <0^a|
    Not(a);
    CNot(b, a);
    Not(a);
    CNot(c, a);
    Not(b);
    Not(c);
    StringNot(flip, c & b & control);
    
    // if a was 1 we want !=, not =
    StringNot(flip, a & control);
    
    // invert all the stuff we did
    !Not(c);
    !Not(b);
    !CNot(c, a);
    !Not(a);
    !CNot(b, a);
    !Not(a);
}

operator CFlipCFNoB(qureg a, qureg c, qureg flip, qureg control) {
    // if a+b = c would have resulted in carrying this
    // flips the cf
    if #a != 1 or #c != 1 or #flip != 1 {
        exit "All input registers must be one qubit";
    }
    
    CNot(c, control);
    StringNot(flip, c & a & control);
    !CNot(c, control);
}

operator FlipCF(qureg a, qureg b, qureg c, qureg flip) {
    qureg empty[0];
    CFlipCF(a, b, c, flip, empty);
}

// this puts (a << aOff) + b into res
operator CAddRegOffset(qureg a, qureg b, qureg res, int aOff, qureg control) {
    int i;
    int j;
    
    if #a != #b or #res != #b {
        exit "All input registers must be equal in length.";
    }
    
    for i = 0 to aOff - 1 {
        StringNot(res[i], b[i] & control);
    }
    
    for i = aOff to #a - 1 {
        if i != aOff {
            j = i - 1;
            CFlipCF(a[j - aOff], b[j], res[j], res[i], control);
        }
        StringNot(res[i], a[i - aOff] & control);
        StringNot(res[i], b[i] & control);
    }
}

operator AddRegOffset(qureg a, qureg b, qureg res, int aOff) {
    qureg control[0];
    CAddRegOffset(a, b, res, aOff, control);
}

// puts a+b into res
operator AddReg(qureg a, qureg b, qureg res) {
    AddRegOffset(a, b, res, 0);
}

// puts a+b into res and sets carry if a carry was performed and
// thus that an overflow occured
operator AddRegCarry(qureg a, qureg b, qureg res, qureg carry) {
    AddReg(a, b, res);
    FlipCF(a[#a - 1], b[#b - 1], res[#res - 1], carry);
}

// puts dest+(add << aOff) into dest
// while running this allocates another n qubits
// where n is the size of dest and add
operator CAddInPlaceOffset(qureg dest, qureg add, int aOff, qureg control) {
    qureg temp[#dest];
    int i;
    int j;
    
    if (aOff >= #add) {
        exit "Pointless offset was supplied";
    }
    
    CAddRegOffset(add, dest, temp, aOff, control);
    
    // zero out the dest
    for j = 0 to #dest - 1 {
        i = #dest - (j + 1);
        // if the number of 1s in <cf| (+) <temp| (+) <add| is odd
        // then the current qubit in dest[i] is <1|;
        
        StringNot(dest[i], temp[i] & control);
        
        if (i >= aOff) {
            StringNot(dest[i], add[i - aOff] & control);
        }
        
        // there is only a carry flag if i > 0
        if (i > 0) {
            if (i > aOff) {
                CFlipCF(dest[i - 1], add[i - 1 - aOff], temp[i - 1], dest[i], control);
            } else {
                // b is effectively <0|
                CFlipCFNoB(dest[i - 1], temp[i - 1], dest[i], control);
            }
        }
    }
    
    StringSwap(temp, dest, control);
}

// puts dest+add into dest
// while running this allocates another n qubits
// where n is the size of dest and add
operator AddInPlace(qureg dest, qureg add) {
    qureg temp[#dest];
    int i;
    int j;
    
    AddReg(add, dest, temp);
    
    // zero out the dest
    for j = 0 to #dest - 1 {
        i = #dest - (j + 1);
        // if the number of 1s in <cf| (+) <temp| (+) <add| is odd
        // then the current qubit in dest[i] is <1|;
        
        CNot(dest[i], temp[i]);
        CNot(dest[i], add[i]);
        
        // there is only a carry flag if i > 0
        if (i > 0) {
            FlipCF(dest[i - 1], add[i - 1], temp[i - 1], dest[i]);
        }
    }
    
    Swap(temp, dest);
}
