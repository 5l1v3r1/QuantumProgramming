include "doubleop.qcl";

operator AddBit(qureg bits, qureg res, qureg cf) {
    if #bits != 2 or #res != 1 or #cf != 1 {
        exit "Incorrect argument directions";
    }
    Swap(res, cf);
    DoubleNot(cf, bits[0] & res);
    CNot(res, bits[0]);
    DoubleNot(cf, bits[1] & res);
    CNot(res, bits[1]);
}

operator AddReg(qureg r1, qureg r2, qureg res, qureg carry) {
    int i;
    if #r1 != #r2 or #r1 != #res {
        exit "Input registers should be equal in length";
    }
    for i = 0 to #r1 - 1 {
        AddBit(r1[i] & r2[i], res[i], carry);
    }
}

operator ZeroCF(qureg a, qureg b, qureg c, qureg cf) {
    // if a+b = c would have resulted in carrying this
    // flips the cf
    if #a != 1 or #b != 1 or #c != 1 or #cf != 1 {
        exit "All input registers must be one qubit";
    }
    
    // if a == 0 then flip if b,c = 1,0
    // if a == 1 then flip if b,c != 0,1
    
    // flips CF if bc = <1^a| <0^a|
    Not(a);
    CNot(b, a);
    Not(a);
    CNot(c, a);
    Not(b);
    Not(c);
    DoubleNot(cf, c & b);
    
    // if a was 1 we want !=, not =
    CNot(cf, a);
    
    // invert all the stuff we did
    !Not(c);
    !Not(b);
    !CNot(c, a);
    !Not(a);
    !CNot(b, a);
    !Not(a);
}

operator AddRegNoCarry(qureg r1, qureg r2, qureg res) {
    qureg c[1];
    AddReg(r1, r2, res, c);
    ZeroCF(r1[#r1 - 1], r2[#r2 - 1], res[#res - 1], c);
}
